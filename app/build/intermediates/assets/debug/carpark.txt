file:///C/......Prateek/....Prateek/New%20folder/CARPARK.txt[18-07-2016 19:55:08]
//**********************************************************
// PROJECT CAR PARKING
//**********************************************************
//**********************************************************
// INCLUDED HEADER FILES
//**********************************************************
#include <iostream.h>
#include <fstream.h>
#include <process.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <conio.h>
#include <dos.h>
# include <iomanip.h>
#include <graphics.h>
//**********************************************************
// THIS CLASS CONTROL ALL THE FUNCTIONS IN THE MENU
//**********************************************************
class MENU
{
public :
void main_menu(void) ;
} ;
//**********************************************************
// THIS CLASS CONTAINS FUNCTIONS RELATED TO BOOKS
//**********************************************************
class CAR
{
public :
void list(void) ;
protected :
void add_new_car(int, char tcarno[15], int, int, int, int) ;
int carname_found(char []) ;
int recordno(int) ;
int reccount(void) ;
void delete_rec(int) ;
int fine(int) ;
int tno;
char carno[15];
int dd,mm,yy;
int hh;
} ;
file:///C/......Prateek/....Prateek/New%20folder/CARPARK.txt[18-07-2016 19:55:08]
class WORKING : public CAR
{
public :
void returncar(void) ;
void add_car(void) ;
} ;
//**********************************************************
// THIS CLASS CONTAINS FUNCTIONS RELATED DATE & FINE
//**********************************************************
class DATE
{
public :
int diff(int, int, int, int, int, int) ;
int day, mon, year ;
} ;
//**********************************************************
// THIS FUNCTION RETURN THE DIFFERENCE BETWEEN TWO GIVEN
// DATES
//**********************************************************
int DATE :: diff(int d1, int m1, int y1, int d2, int m2, int y2)
{
int days = 0 ;
if ((y2<y1) || (y2==y1 && m2<m1) || (y2==y1 && m2==m1 && d2<d1))
return days ;
static int month[] = {31,29,31,30,31,30,31,31,30,31,30,31} ;
while (d1 != d2 || m1 != m2 || y1 != y2)
{
days++ ;
d1++ ;
if ((d1 > month[m1-1]) || (y1%4 != 0 && m1 == 2 && d1 > 28))
{
d1 = 1 ;
m1++ ;
}
if (m1 > 12)
{
m1 = 1 ;
y1++ ;
}
}
return days ;
}
file:///C/......Prateek/....Prateek/New%20folder/CARPARK.txt[18-07-2016 19:55:08]
//**********************************************************
// FUNCTION TO DISPLAY MAIN MENU & CONTROL ALL THE FUNCTION
// IN THE MAIN MENU.
//**********************************************************
void MENU :: main_menu(void)
{
char ch ;
while (1)
{
clrscr() ;
gotoxy(24,6) ;
cout <<"S I N H A C A R P A R K I N G" ;
gotoxy(24,7) ;
cout <<"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" ;
gotoxy(30,11) ;
cout <<"1. CAR REGISTER" ;
gotoxy(30,13) ;
cout <<"2. CAR BILLING" ;
gotoxy(30,15) ;
cout <<"3. PARKING LIST" ;
gotoxy(30,17) ;
cout <<"0. QUIT" ;
gotoxy(30,20) ;
cout <<"Enter your choice : " ;
ch = getche() ;
if (ch == 27)
break ;
else
if (ch == '1')
{
WORKING W ;
W.add_car() ;
}
else
if (ch == '2')
{
WORKING W ;
W.returncar() ;
}
else
if (ch == '3')
{
CAR C ;
C.list() ;
}
else
if (ch == '0')
break ;
}
}
file:///C/......Prateek/....Prateek/New%20folder/CARPARK.txt[18-07-2016 19:55:08]
int CAR :: carname_found(char t1code[15])
{
fstream file ;
file.open("CAR.DAT", ios::in) ;
file.seekg(0,ios::beg) ;
int found=0 ;
while (file.read((char *) this, sizeof(CAR)))
{
if (!strcmpi(carno,t1code))
{
found = tno ;
break ;
}
}
file.close() ;
return found ;
}
int CAR :: recordno(int tcode)
{
fstream file ;
file.open("CAR.DAT", ios::in) ;
file.seekg(0,ios::beg) ;
int count=0 ;
while (file.read((char *) this, sizeof(CAR)))
{
count++ ;
if (tno == tcode)
break ;
}
file.close() ;
return count ;
}
int CAR :: reccount(void)
{
fstream file ;
file.open("CAR.DAT", ios::in) ;
file.seekg(0,ios::beg) ;
int count=0 ;
while (file.read((char *) this, sizeof(CAR)))
count++ ;
file.close() ;
return count ;
}
void CAR :: delete_rec(int tcode)
{
fstream file ;
file.open("CAR.DAT", ios::in) ;
fstream temp ;
temp.open("temp.dat", ios::out) ;
file:///C/......Prateek/....Prateek/New%20folder/CARPARK.txt[18-07-2016 19:55:08]
file.seekg(0,ios::beg) ;
while ( !file.eof() )
{
file.read((char *) this, sizeof(CAR)) ;
if ( file.eof() )
break ;
if ( tno != tcode )
temp.write((char *) this, sizeof(CAR)) ;
}
file.close() ;
temp.close() ;
file.open("CAR.DAT", ios::out) ;
temp.open("temp.dat", ios::in) ;
temp.seekg(0,ios::beg) ;
while ( !temp.eof() )
{
temp.read((char *) this, sizeof(CAR)) ;
if ( temp.eof() )
break ;
file.write((char *) this, sizeof(CAR)) ;
}
file.close() ;
temp.close() ;
}
void CAR :: add_new_car(int tcode,char tcarno[15], int tdd, int tmm, int tyy, int thh)
{
fstream file ;
file.open("CAR.DAT", ios::app) ;
tno = tcode ;
strcpy(carno,tcarno) ;
dd=tdd;
mm=tmm;
yy=tyy;
hh=thh;
file.write((char *) this, sizeof(CAR)) ;
file.close() ;
}
//**********************************************************
// THIS FUNCTION DISPLAY THE LIST OF CARS.
//**********************************************************
void CAR :: list(void)
{
clrscr() ;
int row = 6 , found=0, flag=0 ;
char ch ;
gotoxy(20,2) ;
cout <<"LIST OF CAR" ;
file:///C/......Prateek/....Prateek/New%20folder/CARPARK.txt[18-07-2016 19:55:08]
gotoxy(20,3) ;
cout <<"~~~~~~~~~~~" ;
gotoxy(1,4) ;
cout <<"Token No. CAR NO Parking Date ";
gotoxy(1,5) ;
cout <<"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";
fstream file ;
file.open("CAR.DAT", ios::in) ;
file.seekg(0,ios::beg) ;
while (file.read((char *) this, sizeof(CAR)))
{
flag = 0 ;
delay(20) ;
found = 1 ;
gotoxy(5,row) ;
cout <<tno ;
gotoxy(17,row) ;
cout <<carno ;
gotoxy(35,row) ;
cout <<dd<<"/"<<mm<<"/"<<yy ;
if ( row == 22 )
{
flag = 1 ;
row = 6 ;
gotoxy(1,25) ;
cout <<"Press any key to continue or Press <ESC> to exit" ;
ch = getch() ;
if (ch == 27)
break ;
clrscr() ;
gotoxy(33,2) ;
cout <<"LIST OF CAR" ;
gotoxy(32,3) ;
cout <<"~~~~~~~~~~~~~~~" ;
gotoxy(1,4) ;
cout <<"Token No. CAR NO Parking Date ";
gotoxy(1,5) ;
cout <<"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" ;
}
else
row = row + 1 ;
}
if (!found)
{
gotoxy(5,10) ;
cout <<"\7Records not found" ;
}
if (!flag)
{
gotoxy(1,25) ;
cout <<"Press any key to continue..." ;
getche() ;
}
file.close () ;
file:///C/......Prateek/....Prateek/New%20folder/CARPARK.txt[18-07-2016 19:55:08]
}
int CAR :: fine(int mcode)
{
DATE D ;
int d1, m1, y1 ;
struct date d;
getdate(&d);
d1 = d.da_day ;
m1 = d.da_mon ;
y1 = d.da_year ;
fstream file ;
file.open("CAR.DAT", ios::in) ;
file.seekg(0,ios::beg) ;
int days, t_fine ;
while (file.read((char *) this, sizeof(CAR)))
{
if (tno == mcode)
{
days = D.diff(dd,mm,yy,d1,m1,y1) ;
days++;
t_fine = days * 10 ;
break ;
}
}
file.close() ;
return t_fine ;
}
void WORKING :: add_car(void)
{
if (!reccount()) // MEMBER FUNCTION OF CAR
{
add_new_car(0,"null",0,0,0,0) ;
CAR::delete_rec(0) ;
}
clrscr();
DATE D ;
struct time t;
int d1, m1, y1,h1 ;
struct date d;
getdate(&d);
gettime(&t);
d1 = d.da_day ;
m1 = d.da_mon ;
y1 = d.da_year ;
gotoxy(55,2) ;
cout <<"Date : " <<d1 <<"/" <<m1 <<"/" <<y1 ;
h1=t.ti_hour;
char ch ;
int tcode ;
char tname[15];
file:///C/......Prateek/....Prateek/New%20folder/CARPARK.txt[18-07-2016 19:55:08]
do
{
int found=0, valid=0 ;
int tc,r ;
int rec;
float t2=0.0 ;
char t[20], t1[10] ;
gotoxy(29,3) ;
cout <<"Registration of Car" ;
gotoxy(29,4) ;
cout <<"~~~~~~~~~~~~~~~~~~~" ;
gotoxy(72,1) ;
cout <<"<0>=Exit" ;
gotoxy(5,5) ;
cout <<"Token No. " ;
rec=reccount();
r=rec+1;
tc = r ;
tcode = tc ;
gotoxy(15,5);
cout<<tcode;
valid = 0 ;
while (!valid )
{
valid = 1 ;
gotoxy(5,8) ; clreol() ;
cout <<"Enter Car No. " ;
gotoxy(19,8) ; clreol() ;
gets(tname) ;
strupr(tname) ;
if (tname[0] == '0')
return ;
if (strlen(tname) < 1 || strlen(tname) > 14)
{
valid = 0 ;
gotoxy(5,22) ; clreol() ;
cout <<"\7Enter correctly (Range: 1..14)" ;
getch() ;
}
if(carname_found(tname))
{
cout<<"The Car already exists in the Parking";
getch();
return;
}
}
do
{
gotoxy(5,15) ; clreol() ;
cout <<"Do you want to save (y/n) : " ;
ch = getche() ;
ch = toupper(ch) ;
} while (ch != 'Y' && ch != 'N') ;
file:///C/......Prateek/....Prateek/New%20folder/CARPARK.txt[18-07-2016 19:55:08]
if (ch == 'Y')
{
add_new_car(tcode,tname,d1,m1,y1,h1) ;
}
do
{
gotoxy(5,17) ; clreol() ;
cout <<"Do you want to add more (y/n) : " ;
ch = getche() ;
ch = toupper(ch) ;
} while (ch != 'Y' && ch != 'N') ;
} while (ch == 'Y') ;
}
//**********************************************************
// THIS FUNCTION RETURNS THE CAR
//**********************************************************
void WORKING :: returncar(void)
{
CAR C;
char* t1code;
char ch ;
int t2code=0, mcode=0, valid ;
int d1, m1, y1 ;
struct date d;
getdate(&d);
d1 = d.da_day ;
m1 = d.da_mon ;
y1 = d.da_year ;
do
{
valid = 1 ;
while (1)
{
clrscr() ;
gotoxy(72,1) ;
cout <<"<0>=Exit" ;
gotoxy(5,2) ;
cout <<"Date : " <<d1 <<"/" <<m1 <<"/" <<y1 ;
gotoxy(5,7) ;
cout <<"Enter Car No. " ;
gotoxy(5,8) ;
cout <<" or " ;
gotoxy(5,9) ;
cout <<"Press <ENTER> for help " ;
gets(t1code) ;
if (t1code[0] == '0')
return ;
file:///C/......Prateek/....Prateek/New%20folder/CARPARK.txt[18-07-2016 19:55:08]
if (strlen(t1code) == 0)
C.list() ;
else
break ;
}
t2code = carname_found(t1code) ;
mcode = t2code ;
if (mcode == 0)
{
valid = 0 ;
gotoxy(5,25) ;
cout <<"\7Enter Correctly" ;
getch() ;
}
if (mcode<1 && valid)
{
valid = 0 ;
gotoxy(5,13) ;
cout <<"\7Record not found" ;
gotoxy(5,14) ;
cout <<"Press <ESC> to exit or any other key to continue..." ;
ch = getch() ;
if (ch == 27)
return ;
}
} while (!valid) ;
gotoxy(5,12) ;
cout <<"Token No : " <<tno ;
gotoxy(5,13) ;
cout <<"Car No : " <<carno ;
gotoxy(5,14) ;
cout <<"Parking Date: " <<dd<<"/"<<mm<<"/"<<yy ;
int f ;
f = fine(mcode) ;
delete_rec(mcode);
if (f != 0)
{
gotoxy(5,16) ;
cout <<"You have to pay a Parking Charge : " <<f ;
gotoxy(5,17) ;
cout <<"Thanking You." ;
}
gotoxy(5,19) ;
cout <<"\7Car has been returned" ;
getch() ;
}
int GraphDriver; /* The Graphics device driver */
int GraphMode; /* The Graphics mode value */
double AspectRatio; /* Aspect ratio of a pixel on the screen*/
int MaxX, MaxY; /* The maximum resolution of the screen */
int MaxColors; /* The maximum # of colors available */
file:///C/......Prateek/....Prateek/New%20folder/CARPARK.txt[18-07-2016 19:55:08]
int ErrorCode; /* Reports any graphics errors */
struct palettetype palette; /* Used to read palette info */
// Function prototypes
char menu();
void sum(); // Sum of matrix
void diff(); // Difference of matrix
void tran(); // Transpose of matrix
void prod(); // Product of matrix
void inv(); // Inverse of matrix
void max(); // Maximum of matrix
void min(); // Minimum of matrix
void mean(); // Mean of matrix
void variance(); // Variance of matrix
mainscreen(); // Main screen of matrix manipulation
logo(); // Authors menu
void security();
void operate();
void Initialize(void); // Initialize the graphics mode
void SayGoodbye(void); // Last screen of matrix
void MainWindow(char *header); // Display messages of matrix
void StatusLine(char *msg); // Display prompt message
void DrawBorder(void); // Drawing window in screen
// Changing the text style using function
void changetextstyle(int font, int direction, int charsize);
//**********************************************************
// MAIN FUNCTION CALLING INTRODUCTION AND MAIN MENU
//**********************************************************
void main(void)
{
clrscr() ;
char choice;
int gm = DETECT, gd = CGA;
// Initialise the graphics system for using graphics
initgraph (&gd, &gm, "");
mainscreen();
closegraph(); // Close the graphics mode
initgraph (&gd, &gm, "");
logo();
closegraph();
security();
MENU menu ;
menu.main_menu() ;
}
/* The main function body of main screen which displays the main screen
creating the opening screen display */
mainscreen()
file:///C/......Prateek/....Prateek/New%20folder/CARPARK.txt[18-07-2016 19:55:08]
{
int maxx, maxy, in, area;
void *l;
// Get maximum x, y coordinates of the screen
maxx = getmaxx();
maxy = getmaxy();
// setbkcolor sets the current background color using the palette
setbkcolor(BLUE);
// Draws a rectangle (graphics mode)
rectangle(0, 0, maxx, maxy);
// Finds area to fix the image in memory screen
area = imagesize(0, 0, 637, 177);
// Display the contents of allocated memory on the screen
putimage(1, 11, l, COPY_PUT);
// Sets the line style and text justification in screen
settextstyle(1, HORIZ_DIR, 0);
// Displaying the output text on main screen
outtextxy(100, 20," CAR");
outtextxy(70,60," PARKING ");
outtextxy(90,100,"OPERATION");
settextstyle(7, HORIZ_DIR, 1);
outtextxy(20, 150, "Press any key to continue...");
getch();
// Clear the viewport area
clearviewport();
}
// Function to display the introduction about the author
logo()
{
int maxx, maxy, in, area;
void *l;
// Get maximum x, y coordinates of the screen
maxx = getmaxx();
maxy = getmaxy();
// setbkcolor sets the current background color using the palette
setbkcolor(BLACK);
// Draws a rectangle (graphics mode)
rectangle(0, 0, maxx, maxy);
// Finds area to fix the image in memory screen
area = imagesize(0, 0, 637, 177);
file:///C/......Prateek/....Prateek/New%20folder/CARPARK.txt[18-07-2016 19:55:08]
// Display the contents of allocated memory on the screen
putimage(1, 11, l, COPY_PUT);
// Sets the line style and text justification in screen
settextstyle(3, HORIZ_DIR, 2);
textcolor(WHITE);
// Displaying the output text on main screen
outtextxy(30, 20, "Presented by :");
outtextxy(60,70,"MRIDUL DUTTA &");
outtextxy(60,90,"HITESH RUSTOGI");
settextstyle(7, HORIZ_DIR, 1);
outtextxy(20, 150, "Press any key to continue...");
getch();
// Clear the viewport area
clearviewport();
}
/* */
/* INITIALIZE: Initializes the graphics system and reports */
/* any errors which occured. */
/* */
void Initialize(void)
{
int xasp, yasp; /* Used to read the aspect ratio*/
GraphDriver = DETECT; /* Request auto-detection */
initgraph( &GraphDriver, &GraphMode, "" );
ErrorCode = graphresult(); /* Read result of initialization*/
if( ErrorCode != grOk )
{ /* Error occured during init */
printf(" Graphics System Error: %s\n", grapherrormsg( ErrorCode ) );
exit( 1 );
}
getpalette( &palette ); /* Read the palette from board */
MaxColors = getmaxcolor() + 1; /* Read maximum number of colors*/
MaxX = getmaxx();
MaxY = getmaxy(); /* Read size of screen */
getaspectratio( &xasp, &yasp ); /* Read the hardware aspect */
AspectRatio = (double)xasp / (double)yasp; /* Get correction factor */
}
/* */
/* SAYGOODBYE: Give a closing screen to the user before leaving. */
/* */
file:///C/......Prateek/....Prateek/New%20folder/CARPARK.txt[18-07-2016 19:55:08]
void SayGoodbye(void)
{
struct viewporttype viewinfo; /* Structure to read viewport */
int h, w;
MainWindow( "== Session End ==" );
getviewsettings( &viewinfo ); /* Read viewport settings */
changetextstyle( TRIPLEX_FONT, HORIZ_DIR, 3 );
settextjustify( CENTER_TEXT, CENTER_TEXT );
h = viewinfo.bottom - viewinfo.top;
w = viewinfo.right - viewinfo.left;
outtextxy( w/2, h/2, "Thanks For Using The Matrix Package" );
StatusLine( "Press any key to EXIT" );
getch();
cleardevice(); /* Clear the graphics screen */
}
/* */
/* MAINWINDOW: Establish the main window for the demo and set */
/* a viewport for the demo code. */
/* */
void MainWindow( char *header )
{
int height;
cleardevice(); /* Clear graphics screen */
setcolor( MaxColors - 1 ); /* Set current color to white */
setviewport( 0, 0, MaxX, MaxY, 1 ); /* Open port to full screen */
height = textheight( "H" ); /* Get basic text height */
changetextstyle( DEFAULT_FONT, HORIZ_DIR, 1 );
settextjustify( CENTER_TEXT, TOP_TEXT );
outtextxy( MaxX/2, 2, header );
setviewport( 0, height+4, MaxX, MaxY-(height+4), 1 );
DrawBorder();
setviewport( 1, height+5, MaxX-1, MaxY-(height+5), 1 );
}
/* */
/* STATUSLINE: Display a status line at the bottom of the screen. */
/* */
void StatusLine( char *msg )
{
int height;
file:///C/......Prateek/....Prateek/New%20folder/CARPARK.txt[18-07-2016 19:55:08]
setviewport( 0, 0, MaxX, MaxY, 1 ); /* Open port to full screen */
setcolor( MaxColors - 1 ); /* Set current color to white */
changetextstyle( DEFAULT_FONT, HORIZ_DIR, 1 );
settextjustify( CENTER_TEXT, TOP_TEXT );
setlinestyle( SOLID_LINE, 0, NORM_WIDTH );
setfillstyle( EMPTY_FILL, 0 );
height = textheight( "H" ); /* Detemine current height */
bar( 0, MaxY-(height+4), MaxX, MaxY );
rectangle( 0, MaxY-(height+4), MaxX, MaxY );
outtextxy( MaxX/2, MaxY-(height+2), msg );
setviewport( 1, height+5, MaxX-1, MaxY-(height+5), 1 );
}
/* */
/* DRAWBORDER: Draw a solid single line around the current */
/* viewport. */
/* */
void DrawBorder(void)
{
struct viewporttype vp;
setcolor( MaxColors - 1 ); /* Set current color to white */
setlinestyle( SOLID_LINE, 0, NORM_WIDTH );
getviewsettings( &vp );
rectangle( 0, 0, vp.right-vp.left, vp.bottom-vp.top );
}
/* */
/* CHANGETEXTSTYLE: similar to settextstyle, but checks for */
/* errors that might occur whil loading the font file. */
/* */
void changetextstyle(int font, int direction, int charsize)
{
int ErrorCode;
graphresult(); /*Clear error code */
settextstyle(font, direction, charsize);
ErrorCode = graphresult(); /* Check result */
if ( ErrorCode != grOk )
{ /* If error occured */
closegraph();
printf(" Graphics System Error: %s\n", grapherrormsg( ErrorCode ) );
exit( 1 );
}
file:///C/......Prateek/....Prateek/New%20folder/CARPARK.txt[18-07-2016 19:55:08]
}
void security(void)
{
clrscr();
char pass[20];
char username[20];
textbackground(BLACK);
textcolor(WHITE);
gotoxy(20,12);
cout<<"USER NAME : ";
gets(username);
if(!(strcmp(username,"lorrissa"))||!(strcmp(username,"lorrissa")))
{
for(int i=0;i<5;i++)
{
gotoxy(1,20);
clreol();
gotoxy(1,22);
clreol();
gotoxy(20,14);
clreol();
cout<<"ENTER USER PASSWORD : ";
gets(pass);
if((strcmp(pass,"sanya"))&&(strcmp(pass,"sanya")))
{
if(i<3)
{
gotoxy(15,20);
cout<<" INCORRECT PASSWORD !!! TRY AGAIN !!!";
getch();
}
if(i==3)
{
gotoxy(25,20);
cout<<" INCORRECT PASSWORD !!!";
gotoxy(15,22);
cout<<"TRY AGAIN !!! BUT THIS IS YOUR LAST CHANCE!!!" ;
getch();
}
if(i==4)
{
exit(0);
}
}
else
{
break;
}
}
}
else
{
file:///C/......Prateek/....Prateek/New%20folder/CARPARK.txt[18-07-2016 19:55:08]
if(!(strcmp(username,"lorrissa"))||!(strcmp(username,"lorrissa")))
{
for(int j=0;j<5;j++)
{
gotoxy(1,20);
clreol();
gotoxy(1,22);
clreol();
gotoxy(20,14);
//clreol();
gotoxy(20,14);
cout<<"ENTER USER PASSWORD : ";
gets(pass);
if((strcmp(pass,"sanya"))&&(strcmp(pass,"sanya")))
{
if(j<3)
{
gotoxy(15,20);
cout<<" INCORRECT PASSWORD !!! TRY AGAIN !!!";
getch();
}
if(j==3)
{
gotoxy(25,20);
cout<<" INCORRECT PASSWORD !!!";
gotoxy(15,22);
cout<<"TRY AGAIN !!! BUT THIS IS YOUR LAST CHANCE!!!" ;
getch();
}
if(j==4)
{
exit(0);
}
}
else
{
break;
}
exit(0);
} // end of for loop
}
else
{
exit(0);
}
}
}